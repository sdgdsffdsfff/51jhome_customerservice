<?php
//redis缓存版
 if (!defined('IN_XLP')) { exit('Access Denied!'); }!defined('TRACE') && define('TRACE', 0); if (DEBUG || TRACE) { $GLOBALS['startTime'] = microtime(true); } $System = array('title' => '', 'main_url' => '', 'main_path' => '', 'cookie' => array('pre' => '', 'path' => '/', 'domain' => '',), 'time_zone' => 'PRC', 'vcode' => 'ytuyiqwrwriocv*hhi@kl', 'encrypt_delimiter' => '|:)', 'skin' => 'default', 'c' => 'index', 'm' => 'index', 'g' => '', 'default_group' => 'index', 'group_list' => array(), 'path_mod' => 1, 'delimiter' => '/', 'postfix' => '.html', 'hide_index' => false, 'hide_urlkey' => false, 'url_rule' => array(), 'filter' => 'htmlspecialchars', 'gzip' => false, 'session' => array('auto_start' => true, 'options' => array(), 'pre' => '',), 'var_ajax_submit' => 'is_ajax', 'autoload_action' => array()); $config_path = APP_PATH . 'config/config_inc.php'; if (is_file($config_path)) { $newSystem = include $config_path; $System = array_merge($System, $newSystem); unset($newSystem); } $config_path = APP_PATH . 'function/common.php'; if (is_file($config_path)) { include $config_path; } unset($config_path); date_default_timezone_set($System['time_zone']); function C($file = '', $field = null, $path = APP_PATH, $returnBool = true) { if (empty($file) || strtolower($file) == 'system') { if (!is_null($field)) { return (isset($GLOBALS['System'][$field])) ? $GLOBALS['System'][$field] : null; } else { return $GLOBALS['System']; } } static $_cfile = array(); if (!isset($_cfile[$file])) { $path.='config/' . $file . '_inc.php'; if (is_file($path)) { $_cfile[$file] = include $path; } else { return $returnBool ? false : showError($file . '.php 加载失败。'); } } if (!is_null($field)) { return (isset($_cfile[$file][$field])) ? $_cfile[$file][$field] : null; } else { return $_cfile[$file]; } } function obGzip($content = '') { if (!headers_sent() && extension_loaded('zlib') && isset($_SERVER['HTTP_ACCEPT_ENCODING']) && strstr($_SERVER['HTTP_ACCEPT_ENCODING'], 'gzip')) { header("Content-Encoding: gzip"); header("Vary: Accept-Encoding"); header("Content-Length: " . strlen($content)); $content = gzencode($content, 9); } return $content; } function load($file = '') { if (empty($file)) { return ''; } static $_loadfile = array(); $file = !is_array($file) ? array($file) : $file; $dir = ''; foreach ($file as $f) { $fname = $f; if (strpos($f, '.fun') !== FALSE) { $f = str_replace('.fun', '', $f); } if (!isset($_loadfile[$f . '_core']) && !isset($_loadfile[$f . '_driver']) && !isset($_loadfile[$f . '_function'])) { if (strpos($fname, '.fun') !== FALSE && is_file(XLPHP_PATH . "lib/function/{$fname}.php")) { $dir = 'function'; } elseif (is_file(XLPHP_PATH . "lib/core/{$fname}.class.php")) { $dir = 'core'; $fname.='.class'; } elseif (is_file(XLPHP_PATH . "lib/driver/{$fname}.class.php")) { $dir = 'driver'; $fname.='.class'; } elseif (is_file(XLPHP_PATH . "lib/function/{$fname}.fun.php")) { $dir = 'function'; $fname.='.fun'; } else { showError($f . ' 加载失败。'); } include XLPHP_PATH . "lib/{$dir}/{$fname}.php"; $_loadfile[$f . '_' . $dir] = true; } } return true; } function showMsg($msg, $url = '', $urlTitle = '', $isAutoGo = false, $title = '提示信息', $exit = true, $returnStatus = 0) { if ($url == 'back') { $url = 'javascript:history.back(-1);'; } if (isAjax()) { exit(json_encode(array('status' => $returnStatus, 'info' => $msg, 'data' => $url))); } $fileName = APP_PATH . 'tpl/' . C('System', 'skin') . '/system/message_tpl.php'; if (!file_exists($fileName)) { $fileName = XLPHP_PATH . 'lib/tpl/message_tpl.php'; } return include $fileName; } function showError($msg, $url = 'back', $isAutoGo = false) { if ($msg == 404) { jumpTo(404); } return showMsg($msg, $url, '', $isAutoGo, '错误信息'); } function showOk($msg, $url = 'back', $isAutoGo = false) { return showMsg($msg, $url, '', $isAutoGo, '成功信息', true, 1); } function showInfo($msg = '', $url = 'back', $isexit = false) { return showMsg($msg, $url, '', false, '提示信息', $isexit, 2); } function isHave(&$str, $checkValue = true) { if (!isset($str)) { return false; } if ($checkValue) { $str = is_array($str) ? array_filter($str) : trim($str); return !empty($str) ? true : false; } return true; } function isAjax() { if (isset($_SERVER['HTTP_X_REQUESTED_WITH']) && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest') { return true; } if ((isset($_POST[C('system', 'var_ajax_submit')]) && $_POST[C('system', 'var_ajax_submit')]) || (isset($_GET[C('system', 'var_ajax_submit')]) && $_GET[C('system', 'var_ajax_submit')])) { return true; } return false; } function saveLog($fileName = 'error', $data = '') { $logPath = APP_PATH . 'runtime' . DIRECTORY_SEPARATOR . 'logs' . DIRECTORY_SEPARATOR . trim($fileName, '/'); $fileName = $logPath . '_' . date('Ymd') . '.php'; setDir(dirname($fileName)); $content = ''; if (!is_file($fileName)) { $content = '<?php exit;?>' . PHP_EOL; } return file_put_contents($fileName, $content . date('Y-m-d H:i:s') . PHP_EOL . var_export($data, true) . PHP_EOL, FILE_APPEND); } function showErrorFun($errno, $errstr, $errfile, $errline) { $msg = 'desc：' . $errstr . '，code：' . $errno . '，file：' . str_replace(ROOT, '', $errfile) . '，line：' . $errline; if (DEBUG) { saveLog('log/system', $msg); $trace = debug_backtrace(); $traceInfo = ''; $time = date('y-m-d H:i:m'); foreach ($trace as $t) { foreach (array('file', 'line', 'class', 'type', 'function') as $v) { !isset($t[$v]) && $t[$v] = ''; } $traceInfo .= '[' . $time . '] ' . str_replace(ROOT, '', $t['file']) . ' (' . $t['line'] . ') '; $traceInfo .= $t['class'] . $t['type'] . $t['function'] . '('; $traceInfo .=')<br/>'; } showError(str_replace('，', '<br/>', $msg) . '<br/>调用信息：<br/>' . $traceInfo); } } function loadAppFile($file = '', $ext = '.php') { if (!$file) { showError('加载自定义函数失败(文件名不能为空)'); } $file = $file . $ext; static $_loadappfile = array(); if ($file == 'common' || isset($_loadappfile[$file])) { return true; } $path = APP_PATH . 'function/' . $file; if (is_file($path)) { $_loadappfile[$file] = true; return include $path; } else { showError($path . ' 加载失败。'); } } function jumpTo($url = 'javascript:history.back(-1);') { if ($url == 404) { header('HTTP/1.1 404 Not Found'); $url = '/404.html'; } header('location:' . $url); exit; } function G($name = '', $val = '') { if (empty($name)) { return $GLOBALS['System']; } if ('' !== $val) { $GLOBALS['System'][$name] = $val; return $val; } return isset($GLOBALS['System'][$name]) ? $GLOBALS['System'][$name] : null; } function setHideIndex($str = '', $hideIndex = true) { if (C('System', 'hide_index') && $hideIndex && strExists($str, SCRIPT_NAME)) { $str = str_replace(array(SCRIPT_NAME . '/', SCRIPT_NAME), '', $str); } return $str; } function getShowIndex($str = '') { if (!C('System', 'hide_index')) { $str.=SCRIPT_NAME; } return $str; } function D($classname = '') { static $_Dmodel = array(); static $_DmodelAutoLoad = array(); $sys = C('system', 'autoload_model'); if (!$_DmodelAutoLoad && isHave($sys)) { foreach ($sys as $val) { $path = APP_PATH . 'lib/model/' . $val . 'Model.class.php'; if (is_file($path)) { include $path; $_DmodelAutoLoad[$val] = true; } else { showError('自动加载模型：' . $val . '不存在'); } } } if (!empty($classname)) { if (isset($_Dmodel[$classname])) { return $_Dmodel[$classname]; } $path = APP_PATH . 'lib/model/' . $classname . 'Model.class.php'; if (is_file($path)) { load('model'); if (!isset($_DmodelAutoLoad[$classname])) { include $path; } $class = $classname . 'Model'; if (checkPath($classname) && class_exists($class)) { $_Dmodel[$classname] = new $class(); return $_Dmodel[$classname]; } } } return M($classname); } function getTableName($table = '') { $dbConf = C('database'); return '`' . $dbConf[$dbConf['dbtype']]['dbprefix'] . $table . '`'; } function M($dbname = '', $config = 'database') { load('model'); $_Mmodel = model::getInstance($config); if (!empty($dbname)) { $_Mmodel->dbTable = $dbname; } return $_Mmodel; } function V($file = '', $addc = true) { if (!$file) { return ''; } static $_vfile = array(); if (isset($_vfile[$file])) { return true; } $path = $file; if ($addc) { $path .= '.class'; } $path = XLPHP_PATH . 'vendor/' . $path . '.php'; if (is_file($path)) { $_vfile[$file] = true; return include $path; } else { showError($file . '.php 加载失败。'); } } function T($file = '', $addc = true) { if (!$file) { return ''; } static $_tfile = array(); if (isset($_tfile[$file])) { return true; } $path = $file; if ($addc) { $path.='.class'; } $path = APP_PATH . 'service/' . $path . '.php'; if (is_file($path)) { $_tfile[$file] = true; return include $path; } else { showError('服务类库' . $file . '.php 加载失败。'); } } function F($name, $value = '', $path = '') { V('db/redis'); redisApi::init(); if ($path) { $name = $path . '_' . $name; } $saveName = strExists($name, '/') ? strtr($name, '/', '_') : $name; if ('' !== $value) { if (is_null($value)) { return redisApi::hdelete('Fdata',$saveName); } else { return redisApi::hset('Fdata',$saveName, $value); } } return redisApi::hget('Fdata',$saveName); } function S($name, $value = '', $expire = 0) { V('db/redis'); redisApi::init(); $saveName = 'Sdata_' . (strExists($name, '/') ? strtr($name, '/', '_') : $name); if ('' !== $value) { if (is_null($value)) { return redisApi::delete($saveName); } else { return redisApi::set($saveName, $value, $expire); } } return redisApi::get($saveName); } function U($strArr = '', $arrList = array(), $native = false, $hidePostFix = false) { $querystr = ''; $sys = C('System'); if (!empty($strArr) && is_string($strArr) && strExists($strArr, '/')) { $strArr = explode('/', $strArr); if (count($strArr) == 2) { array_unshift($strArr, GROUP_NAME); } $strArr = array_merge_recursive(array('g' => $strArr[0], 'c' => $strArr[1], 'm' => $strArr[2]), $arrList); } if (!empty($strArr) && is_array($strArr)) { $tmp = array(); foreach (array('g', 'c', 'm') as $val) { if (!isset($strArr[$val])) { $tmp[$val] = C('System', $val); } else { $tmp[$val] = $strArr[$val]; unset($strArr[$val]); } } $strArr = array_merge($tmp, $strArr); if (empty($strArr['g']) || $strArr['g'] == C('System', 'default_group')) { unset($strArr['g']); } unset($tmp); if (($sys['path_mod'] == 1 || $sys['path_mod'] == 3) && !$native) { if (!C('System', 'hide_index') && !C('System', 'hide_urlkey')) { $querystr = '/'; } if (is_array($strArr)) { foreach ($strArr as $key => $value) { if (C('System', 'hide_urlkey') || in_array($key, array('g', 'c', 'm'))) { $key = ''; } else { $key.=C('System', 'delimiter'); } $querystr.=$key . urlencode($value) . C('System', 'delimiter'); } $querystr = rtrim($querystr, C('System', 'delimiter')); } else { $querystr.=$strArr; } if (!$hidePostFix) { $querystr.=C('System', 'postfix'); } if (C('System', 'url_rule')) { foreach (C('System', 'url_rule') as $key => $val) { if (strExists($querystr, $key)) { $querystr = str_replace($key, $val, $querystr); break; } } } } elseif ($strArr) { $querystr = '?' . http_build_query($strArr, '', '&'); } } return setHideIndex(MAIN_URL . $querystr); } function getRandStr($length = 16, $specialChars = false) { $chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'; if ($specialChars) { $chars .= '!@#$%^&()'; } $randStr = ''; for ($i = 0; $i < $length; $i++) { $randStr .= substr($chars, mt_rand(0, strlen($chars) - 1), 1); } return $randStr; } function getRandInt($length = 12, $numeric = 1) { PHP_VERSION < '4.2.0' ? mt_srand((double) microtime() * 1000000) : mt_srand(); $seed = base_convert(md5(print_r($_SERVER, 1) . microtime()), 16, $numeric ? 10 : 35); $seed = $numeric ? (str_replace('0', '', $seed) . '012340567890') : ($seed . 'zZ' . strtoupper($seed)); $hash = ''; $max = strlen($seed) - 1; for ($i = 0; $i < $length; $i++) { $hash .= $seed[mt_rand(0, $max)]; } return $hash; } function deleteDir($dir = '') { if (empty($dir)) { return false; } if (substr($dir, -1) == '/') { $dir = rtrim($dir, '/'); } if (!file_exists($dir)) { return true; } if (!is_dir($dir) || is_link($dir)) { return @unlink($dir); } foreach (scandir($dir) as $item) { if ($item == '.' || $item == '..') { continue; } if (!deleteDir($dir . '/' . $item)) { @chmod($dir . '/' . $item, 0777); if (!deleteDir($dir . '/' . $item)) { return false; } } } return @rmdir($dir); } function setDir($dir, $mode = 0777) { if (!$dir) { return false; } if (strpos($dir, '\\') !== FALSE) { $dir = str_replace('\\', '/', $dir); } if (is_dir($dir)) { return true; } $mdir = ''; $dirlist = explode('/', $dir); foreach ($dirlist as $val) { $mdir .= $val . '/'; if ($val == '..' || $val == '.' || trim($val) == '') { continue; } if (!is_dir($mdir)) { if (!@mkdir($mdir, $mode, true)) { return false; } if (!is_file("$mdir/index.htm")) { file_put_contents("$mdir/index.htm", ''); } } } return true; } function inTime($time = '') { return $time ? strtotime($time) : TIME; } function outTime($str = '', $style = 1) { if (empty($str)) { return ''; } switch ($style) { case 2:$time = 'Y-m-d'; break; case 3:$time = 'Y/m/d H:i:s'; break; case 4:$time = 'Y/m/d'; break; case 1: default:$time = 'Y-m-d H:i:s'; } return date($time, $str); } function getSiteUrl($type = 'all') { $current_page_url = 'http'; if (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on') { $current_page_url .= 's'; } $current_page_url .= '://' . $_SERVER['SERVER_NAME']; if ($_SERVER['SERVER_PORT'] != '80') { $current_page_url .= ':' . $_SERVER['SERVER_PORT']; } if ($type == 'all') { $current_page_url .= $_SERVER['REQUEST_URI']; } elseif ($type == 'main') { $current_page_url .=$_SERVER['SCRIPT_NAME']; } return $current_page_url; } function getFileExt($file) { $fileExt = addslashes(strtolower(substr(strrchr($file, '.'), 1, 10))); if ($fileExt == 'jpeg') { $fileExt = 'jpg'; } return $fileExt; } function strExists($haystack, $needle) { return !(stripos($haystack, $needle) === FALSE); } function formHash() { static $tokenValue = ''; if (!$tokenValue) { $tokenValue = md5(VCODE . microtime(TRUE)); mySession('__hash__', $tokenValue); } return $tokenValue; } function formCheck() { if (isHave($_POST['__hash__']) && mySession('__hash__') && $_SERVER['REQUEST_METHOD'] == 'POST') { if ((empty($_SERVER['HTTP_REFERER']) || preg_replace("/https?:\/\/([^\:\/]+).*/i", "\\1", $_SERVER['HTTP_REFERER']) == preg_replace("/([^\:]+).*/", "\\1", $_SERVER['HTTP_HOST'])) && $_POST['__hash__'] == mySession('__hash__')) { return true; } } return false; } function formClear() { mySession('__hash__', null); if (isset($_POST['__hash__'])) { unset($_POST['__hash__']); } return true; } function checkPath($str) { return preg_match('/^-?[0-9a-zA-Z_]+$/', $str) ? true : false; } function checkNum($str = '') { return preg_match('/^[0-9]{1,}$/', $str) ? true : false; } function changeFileSize($size, $dec = 2) { $a = array('Byte', 'KB', 'MB', 'GB', 'TB', 'PB'); $pos = 0; while ($size >= 1024) { $size /= 1024; $pos++; } return round($size, $dec) . ' ' . $a[$pos]; } function setEnocde($data = array(), $secretkey = '', $file = 'Xxtea') { if (empty($data)) { return ''; } $secretkey = $secretkey ? $secretkey : VCODE; V('Crypt/' . $file); return MyEncrypt::encrypt($data, $secretkey); } function getDecode($data = '', $secretkey = '', $file = 'Xxtea') { if (empty($data)) { return ''; } $secretkey = $secretkey ? $secretkey : VCODE; V('Crypt/' . $file); return MyEncrypt::decrypt($data, $secretkey); } function myCookie($var, $value = '', $life = 0) { global $System; if ('' === $value) { if (isHave($_COOKIE[$System['cookie']['pre'] . $var])) { return $_COOKIE[$System['cookie']['pre'] . $var]; } else { return NULL; } } else { if (is_null($value)) { setcookie($System['cookie']['pre'] . $var, '', TIME - 3600, $System['cookie']['path'], $System['cookie']['domain'], $_SERVER['SERVER_PORT'] == 443 ? 1 : 0); unset($_COOKIE[$var]); } else { setcookie($System['cookie']['pre'] . $var, $value, $life ? (TIME + $life) : 0, $System['cookie']['path'], $System['cookie']['domain'], $_SERVER['SERVER_PORT'] == 443 ? 1 : 0); $_COOKIE[$var] = $value; } } } function mySession($name, $value = '') { $sessionConf = C('System', 'session'); $prefix = $sessionConf['pre']; if (is_array($name)) { if ($sessionConf['var_session_id'] && isset($_REQUEST[$sessionConf['var_session_id']])) { session_id($_REQUEST[$sessionConf['var_session_id']]); } elseif (isset($name['id'])) { session_id($name['id']); } ini_set('session.auto_start', 0); if (isset($name['name'])) session_name($name['name']); if (isset($name['path'])) session_save_path($name['path']); if (isset($name['domain'])) ini_set('session.cookie_domain', $name['domain']); if (isset($name['expire'])) ini_set('session.gc_maxlifetime', $name['expire']); if (isset($name['use_trans_sid'])) ini_set('session.use_trans_sid', $name['use_trans_sid'] ? 1 : 0); if (isset($name['use_cookies'])) ini_set('session.use_cookies', $name['use_cookies'] ? 1 : 0); if (isset($name['cache_limiter'])) session_cache_limiter($name['cache_limiter']); if (isset($name['cache_expire'])) session_cache_expire($name['cache_expire']); } elseif ('' === $value) { if (0 === strpos($name, '[')) { if ('[pause]' == $name) { session_write_close(); } elseif ('[start]' == $name) { session_start(); } elseif ('[destroy]' == $name) { $_SESSION = array(); session_unset(); session_destroy(); } elseif ('[regenerate]' == $name) { session_regenerate_id(); } } elseif (0 === strpos($name, '?')) { $name = substr($name, 1); if ($prefix) { return isset($_SESSION[$prefix][$name]); } else { return isset($_SESSION[$name]); } } elseif (is_null($name)) { if ($prefix) { unset($_SESSION[$prefix]); } else { $_SESSION = array(); } } elseif ($prefix) { return isset($_SESSION[$prefix][$name]) ? $_SESSION[$prefix][$name] : null; } else { return isset($_SESSION[$name]) ? $_SESSION[$name] : null; } } elseif (is_null($value)) { if ($prefix && isset($_SESSION[$prefix][$name])) { unset($_SESSION[$prefix][$name]); } elseif (isset($_SESSION[$name])) { unset($_SESSION[$name]); } } else { if ($prefix) { if (isset($_SESSION[$prefix]) && !is_array($_SESSION[$prefix])) { $_SESSION[$prefix] = array(); } $_SESSION[$prefix][$name] = $value; } else { $_SESSION[$name] = $value; } } } function getUserIp() { if (getenv('HTTP_CLIENT_IP') && strcasecmp(getenv('HTTP_CLIENT_IP'), 'unknown')) { $ip = getenv('HTTP_CLIENT_IP'); } else if (getenv('HTTP_X_FORWARDED_FOR') && strcasecmp(getenv('HTTP_X_FORWARDED_FOR'), 'unknown')) { $ip = getenv('HTTP_X_FORWARDED_FOR'); } else if (getenv('REMOTE_ADDR') && strcasecmp(getenv('REMOTE_ADDR'), 'unknown')) { $ip = getenv('REMOTE_ADDR'); } else if (isset($_SERVER['REMOTE_ADDR']) && $_SERVER['REMOTE_ADDR'] && strcasecmp($_SERVER['REMOTE_ADDR'], 'unknown')) { $ip = $_SERVER['REMOTE_ADDR']; } else { $ip = '0.0.0.0'; } return $ip; } function cnsubStr($sourcestr, $cutlength = 100, $startlength = 0, $html = false, $ellipsis = false) { $returnstr = ''; $i = 0; $n = 0; if (!$html) { $sourcestr = strip_tags($sourcestr, '<br/>,<br>'); } $str_length = strlen($sourcestr); while (($n < $cutlength) and ( $i <= $str_length)) { $temp_str = substr($sourcestr, $i, 1); $ascnum = Ord($temp_str); if ($ascnum >= 224) { $returnstr .=substr($sourcestr, $i, 3); $i = $i + 3; $n++; } elseif ($ascnum >= 192) { $returnstr .=substr($sourcestr, $i, 2); $i = $i + 2; $n++; } elseif ($ascnum >= 65 && $ascnum <= 90) { $returnstr .=substr($sourcestr, $i, 1); $i = $i + 1; $n++; } else { $returnstr .=substr($sourcestr, $i, 1); $i = $i + 1; $n = $n + 0.5; } if ($n <= $startlength) { $returnstr = ''; continue; } } if ($ellipsis && $str_length > $cutlength) { $returnstr .='...'; } return $returnstr; } function getStrLen($str) { $length = strlen(preg_replace('/[\x00-\x7F]/', '', $str)); if ($length) { return strlen($str) - $length + intval($length / 3) * 2; } else { return strlen($str); } } function getUrlStrList($arr = array(), $retrunArr = false) { if ($arr) { foreach ($arr as $key => $val) { if (!is_null($val)) { $_GET[$key] = $val; } elseif (isset($_GET[$key])) { unset($_GET[$key]); } } } return $retrunArr ? $_GET : http_build_query($_GET, '', '&'); } function clearStrSpace($str = '') { return trim(preg_replace("/\s+/", ' ', str_replace(array("\r", "\n", "\t", "\r\n", '  ', '&nbsp;', '&amp;nbsp;'), '', $str))); } function wordsFilter($content = '', $delhtmltag = false) { if (empty($content)) { return ''; } if (!$delhtmltag) { return htmlspecialchars(strip_tags($content)); } else { load('string.fun'); return removeXss($content); } } function autoCharset($fContents, $from = 'gbk', $to = 'utf-8') { $from = strtoupper($from) == 'UTF8' ? 'utf-8' : $from; $to = strtoupper($to) == 'UTF8' ? 'utf-8' : $to; if (strtoupper($from) === strtoupper($to) || empty($fContents) || (is_scalar($fContents) && !is_string($fContents))) { return $fContents; } if (is_string($fContents)) { if (function_exists('mb_convert_encoding')) { return mb_convert_encoding($fContents, $to, $from); } elseif (function_exists('iconv')) { return iconv($from, $to, $fContents); } else { return $fContents; } } elseif (is_array($fContents)) { foreach ($fContents as $key => $val) { $_key = autoCharset($key, $from, $to); $fContents[$_key] = autoCharset($val, $from, $to); if ($key != $_key) { unset($fContents[$key]); } } return $fContents; } else { return $fContents; } } if ($System['session']['auto_start']) { session_start(); } $System['gzip'] ? ob_start('obGzip') : ob_start(); class action { protected $tVar = array(); public $isSetDefine = false; public $returnJson = true; function __construct() { if (get_magic_quotes_gpc()) { $_GET = $this->sec($_GET); $_POST = $this->sec($_POST); $_COOKIE = $this->sec($_COOKIE); } } function assign($name, $value = '') { if (is_array($name)) { $this->tVar = array_merge($this->tVar, $name); } elseif (is_object($name)) { foreach ($name as $key => $val) { $this->tVar[$key] = $val; } } else { $this->tVar[$name] = $value; } } function display($templates = '', $path = '') { if ($this->tVar) { extract($this->tVar, EXTR_OVERWRITE); } if (!$this->isSetDefine) { define('TPL_PATH', APP_PATH . 'tpl/' . C('System', 'skin') . '/'); define('PUBLIC_PATH', (G('main_path') ? SITE_PATH : WEB_PATH) . 'statics/' . C('System', 'skin') . '/'); define('IMG_PATH', PUBLIC_PATH . 'images/'); define('JS_PATH', PUBLIC_PATH . 'js/'); define('CSS_PATH', PUBLIC_PATH . 'css/'); define('LOCAL_PUBLIC_PATH', WEB_PATH . 'statics/' . C('System', 'skin') . '/'); load('view.fun'); $this->isSetDefine = true; } if (!$templates) { $templates = C('System', 'm'); } if (!$path) { $path = C('System', 'c'); } return include getTpl($templates, $path); } function getFetch($templates = '', $path = '') { ob_start(); $this->display($templates, $path); $content = ob_get_contents(); ob_end_clean(); return $content; } function JsonReturn($info = '', $data = null, $status = 0) { if ($this->returnJson) { exit(json_encode(array('status' => $status, 'info' => $info, 'data' => $data))); } else { $_SERVER['HTTP_X_REQUESTED_WITH'] = null; return $status ? showInfo($info) : showError($info); } } function getAllVar() { return $this->tVar; } function _getid($field = '', $val = 0) { return $this->_field_id('GET', $field, $val); } function _postid($field = '', $val = 0) { return $this->_field_id('POST', $field, $val); } function _get($field = '', $val = '', $fun = '') { return $this->_field('GET', $field, $val, $fun); } function _post($field = '', $val = '', $fun = '') { return $this->_field('POST', $field, $val, $fun); } function sec(&$array, $fun = 'stripslashes') { if (empty($array)) { return ''; } if (is_array($array)) { foreach ($array as $k => $v) { $array[$k] = $this->sec($v, $fun); } } else { $array = trim($fun($array)); } return $array; } private function _field_id($type = 'GET', $field = '', $val = null) { if ($type == 'GET') { return isset($_GET[$field]) && $_GET[$field] && checkNum($_GET[$field]) ? $_GET[$field] : $val; } elseif (isset($_POST[$field]) && $_POST[$field] && checkNum($_POST[$field])) { return $_POST[$field]; } return $val; } private function _field($type = 'GET', $field = '', $val = null, $fun = '') { if (!$field) { return null; } $fun = $fun ? $fun : C('System', 'filter'); if ($type == 'GET') { return isset($_GET[$field]) && $_GET[$field] ? $this->sec($_GET[$field], $fun) : $val; } elseif (isset($_POST[$field]) && $_POST[$field]) { return $this->sec($_POST[$field], $fun); } return $val; } } class xlphp { static function run() { $sys = C('System'); if ($sys['path_mod'] == 3 && isHave($_GET['s']) && !isHave($_SERVER['PATH_INFO'])) { $_SERVER['PATH_INFO'] = $_GET['s']; } if (isHave($_SERVER['PATH_INFO'])) { $pathinfo = explode($sys['delimiter'], $_SERVER['PATH_INFO']); $count = count($pathinfo); if ($count) { if (strExists($pathinfo[0], $sys['delimiter'])) { $pathinfo[0] = trim($pathinfo[0], $sys['delimiter']); array_unshift($pathinfo, ''); } $count = $count - 1; if (empty($pathinfo[$count - 1])) { unset($pathinfo[$count - 1]); } if (!empty($sys['postfix']) && strExists($pathinfo[$count], $sys['postfix'])) { $pathinfo[$count] = strtr($pathinfo[$count], array($sys['postfix'] => '')); } if (isHave($pathinfo[1]) && $pathinfo[1] != $sys['default_group'] && $sys['group_list'] && in_array($pathinfo[1], $sys['group_list'])) { $_GET['g'] = $pathinfo[1]; if (isHave($pathinfo[2])) { $_GET['c'] = $pathinfo[2]; } if (isHave($pathinfo[3])) { $_GET['m'] = $pathinfo[3]; } $goIndex = 4; } else { if (isHave($pathinfo[1])) { $_GET['c'] = $pathinfo[1]; } if (isHave($pathinfo[2])) { $_GET['m'] = $pathinfo[2]; } $goIndex = 3; } if ($count > $goIndex) { for ($foo = $goIndex; $foo < $count; $foo+=2) { $_GET[$pathinfo[$foo]] = $pathinfo[$foo + 1]; } } } } $_GET['c'] = isHave($_GET['c']) ? trim($_GET['c']) : $sys['c']; $_GET['m'] = isHave($_GET['m']) ? trim($_GET['m']) : $sys['m']; $_GET['g'] = isHave($_GET['g']) ? trim($_GET['g']) : $sys['default_group']; define('GROUP_NAME', $_GET['g']); define('ACTION_NAME', $_GET['c']); define('MODEL_NAME', $_GET['m']); $GLOBALS['System']['g'] = GROUP_NAME; $GLOBALS['System']['c'] = ACTION_NAME; $GLOBALS['System']['m'] = MODEL_NAME; $c = ACTION_NAME . 'Action'; $path = APP_PATH . 'lib/action/' . ((GROUP_NAME == 'index' || !GROUP_NAME) ? 'index/' : GROUP_NAME . '/') . $c . '.class.php'; if (checkPath($c) && is_file($path)) { if (isHave($sys['autoload_action'])) { foreach ($sys['autoload_action'] as $key => $val) { if (!is_string($key) || $key == GROUP_NAME) { if (!is_array($val)) { $val = array($val); } foreach ($val as $v) { if (!$key || $key == 'index') { $key = 'index/'; } else { $key.='/'; } $autoPath = APP_PATH . 'lib/action/' . $key . $v . 'Action.class.php'; if (is_file($autoPath)) { include $autoPath; } else { showError('自动加载控制器：' . $v . '不存在'); } } } } } include $path; $control = ''; if (class_exists($c)) { $control = new $c(); } if (checkPath(MODEL_NAME) && method_exists($control, MODEL_NAME)) { return $control->$_GET['m'](); } elseif (method_exists($control, '_empty')) { return $control->_empty(); } elseif (method_exists($control, '_error')) { return $control->_error(); } else { showError('模型 ' . htmlspecialchars(strip_tags(MODEL_NAME)) . ' 不存在'); } } showError('控制器 ' . htmlspecialchars(strip_tags(ACTION_NAME)) . ' 不存在'); } } define('SCRIPT_NAME', basename($_SERVER['SCRIPT_NAME'])); $dirName = str_replace('\\', '/', dirname($_SERVER['SCRIPT_NAME'])); define('URL', getSiteUrl()); define('MAIN_URL', getSiteUrl('main')); define('BASE_URL', rtrim(MAIN_URL, SCRIPT_NAME)); define('WEB_URL', isHave($System['main_url']) ? $System['main_url'] : ($dirName == '/' ? $dirName : $dirName . '/')); define('WEB_TITLE', $System['title']); define('VCODE', $System['vcode']); define('IS_CGI', substr(PHP_SAPI, 0, 3) == 'cgi' ? 1 : 0 ); define('IS_WIN', strstr(PHP_OS, 'WIN') ? 1 : 0 ); define('IS_CLI', PHP_SAPI == 'cli' ? 1 : 0); $url = parse_url($dirName); $url = isset($url['path']) ? $url['path'] : ''; define('SITE_PATH', isHave($System['main_path']) ? $System['main_path'] : ($url == '/' ? $url : $url . '/')); define('WEB_PATH', $url == '/' ? $url : $url . '/'); unset($url, $dirName); define('TIME', $_SERVER['REQUEST_TIME']); define('USER_AGENT', isset($_SERVER['HTTP_USER_AGENT']) ? $_SERVER['HTTP_USER_AGENT'] : ''); xlphp::run(); if (TRACE && !isAjax()) { load('sys.fun'); getRunInfo(); } if ($System['gzip']) { ob_end_flush(); }